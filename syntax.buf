# buffer manipulation lang

macro dot(a, b) a.x * b.x + a.y + b.y
macro neg(a) 0.0 - [1.0, 0.0, 0.0]

types: vec4, vec3, vec2, float
operator: + | - | / | * | == | > | < | >= | <=

binary: expr operator expr
block: { (expr\n)*expr }
expr: literal | binary | block | expr if expr else expr | repeat expr statement | [name](arg1, arg2, ...)
statement: [name] = [expr] | macro [name](arg1, arg2, ...) [expr] | give expr | return expr
statementexpr: statement | expr

coord : vec2
resolution : vec2
frag : vec4
frame: float

x = {
    y = 1
    give [y; 4]
} if 0.0 {
    give [0.5; 4]
}

# MACROS:
    # min : float [; 2] [; 3] [; 4]
    # lerps between min-max based on mixer
    macro mix(min, max, mixer) min + mixer * (max - min)


# example program

red = [0, 0.5, 0]
blue = [0, 0, 1]

my_vec3 = [1; 4]

prod = red dot blue

intensity = red.x

i = 0
repeat 5 {
    i = i + 1
}

x = intensity > 0.3 if {
    give 0.5
} else {
    give 0.5
}




[expr] = [expr] + [expr] | [expr] - [expr] | vec4 (dot) vec4 | vec4 * vec4 | vec4 | vec3 | vec2 | float
[var] = [expr]







# in buf, x, y
x = 10
x = x + 10


return vec4[1.0, 0.0, 1.0, 0.0]
